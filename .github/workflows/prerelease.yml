name: Prerelease

on:
  push:
    branches: [main, develop]
  workflow_dispatch:

# 添加必要的权限配置
permissions:
  contents: write
  actions: read
  security-events: write

env:
  NODE_VERSION: 20
  PYTHON_VERSION: '3.8'

jobs:
  prerelease:
    name: Prerelease Check
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.package.outputs.version }}
      product-name: ${{ steps.package.outputs.productName }}
      should-release: ${{ steps.check.outputs.should-release }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Clone source repository
        if: ${{ env.GIT_ADDRESS1 != '' }}
        run: |
          # 安全的清理和克隆操作
          echo "Cleaning workspace..."
          git clean -fxd
          rm -rf .git .github
          echo "Cloning source repository..."
          git clone -b feature/electron-37-upgrade --single-branch --depth 1 "$GIT_ADDRESS1" temp_repo
          cp -r temp_repo/* temp_repo/.* . 2>/dev/null || true
          rm -rf temp_repo
        shell: bash
        env:
          GIT_ADDRESS1: ${{ secrets.GIT_ADDRESS1 }}

      - name: Get package info
        id: package
        uses: Ireoo/get-package@v1
        with:
          path: package.json
          key: version

      - name: Get product name
        id: product
        uses: Ireoo/get-package@v1
        with:
          path: package.json
          key: productName

      - name: Check if should release
        id: check
        run: |
          # 检查是否应该发布（可以根据需要添加更多逻辑）
          echo "should-release=true" >> $GITHUB_OUTPUT
        shell: bash

  build:
    name: Build (${{ matrix.os }})
    needs: [prerelease]
    if: needs.prerelease.outputs.should-release == 'true'

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: macos-13
            platform: darwin
            arch: x64
          - os: windows-latest
            platform: win32
            arch: x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Clone source repository
        if: ${{ env.GIT_ADDRESS1 != '' }}
        run: |
          echo "Cleaning workspace completely..."
          # 保留重要文件
          mkdir -p /tmp/backup
          cp -r .github /tmp/backup/ 2>/dev/null || true

          # 完全清空当前目录（包括.git和所有隐藏文件）
          rm -rf * .[^.]* 2>/dev/null || true

          echo "Cloning source repository..."
          git clone -b feature/electron-37-upgrade --single-branch --depth 1 "$GIT_ADDRESS1" .

          # 恢复GitHub Actions配置
          cp -r /tmp/backup/.github . 2>/dev/null || true
          rm -rf /tmp/backup
        shell: bash
        env:
          GIT_ADDRESS1: ${{ secrets.GIT_ADDRESS1 }}

      - name: Install dependencies
        run: |
          echo "Installing npm dependencies..."
          npm ci --prefer-offline --no-audit
        env:
          ELECTRON_CACHE: ~/.cache/electron
          ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder

      - name: Build for Windows
        if: matrix.platform == 'win32'
        run: |
          echo "Building for Windows..."
          npm run win
          npm run build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build for Linux
        if: matrix.platform == 'linux'
        run: |
          echo "Building for Linux..."
          npm run linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build for macOS (Pure)
        if: matrix.platform == 'darwin'
        run: |
          echo "Building pure macOS version..."
          npm run build:pure
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build macOS DMG
        if: matrix.platform == 'darwin'
        run: |
          echo "Building macOS DMG..."
          npm run mac:dmg
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 如果需要代码签名，添加以下环境变量
          # CSC_LINK: ${{ secrets.CSC_LINK }}
          # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}

      - name: Build macOS MAS
        if: matrix.platform == 'darwin'
        run: |
          echo "Building macOS App Store version..."
          npm run mac:mas
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true # MAS构建可能因证书问题失败

      - name: List build artifacts
        run: |
          echo "Build artifacts:"
          ls -la build/ 2>/dev/null || echo "No build directory found"
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            build/*.exe
            build/*.msi  
            build/*.dmg
            build/*.zip
            build/*.AppImage
            build/*.pkg
            build/*.deb
            build/*.rpm
            build/*.apk
            build/latest*.yml
          retention-days: 7
          if-no-files-found: warn

  release:
    name: Create Prerelease
    needs: [prerelease, build]
    runs-on: ubuntu-latest
    if: always() && needs.prerelease.outputs.should-release == 'true'

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release_files
          find artifacts -type f \( \
            -name "*.exe" -o -name "*.msi" -o -name "*.dmg" -o \
            -name "*.zip" -o -name "*.AppImage" -o -name "*.pkg" -o \
            -name "*.deb" -o -name "*.rpm" -o -name "*.apk" -o \
            -name "latest*.yml" \
          \) -exec cp {} release_files/ \;

          echo "Release files:"
          ls -la release_files/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.prerelease.outputs.version }}
          name: ${{ needs.prerelease.outputs.product-name }} v${{ needs.prerelease.outputs.version }}
          draft: false
          prerelease: true
          fail_on_unmatched_files: false
          generate_release_notes: true
          body: |
            ## 🚀 Prerelease v${{ needs.prerelease.outputs.version }}

            This is a prerelease version of ${{ needs.prerelease.outputs.product-name }}.

            ### 📦 Available Downloads
            - **Windows**: `.exe`, `.msi` files
            - **macOS**: `.dmg`, `.pkg` files  
            - **Linux**: `.AppImage`, `.deb`, `.rpm` files

            ### ⚠️ Note
            This is a prerelease version and may contain bugs. Please report any issues.

            ---
            Built with ❤️ by GitHub Actions
          files: release_files/*
          token: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    name: Cleanup
    needs: [release]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Delete old prereleases
        uses: actions/github-script@v7
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const prereleases = releases.data.filter(release => release.prerelease);

            // 保留最新的5个预发布版本
            if (prereleases.length > 5) {
              const toDelete = prereleases.slice(5);
              
              for (const release of toDelete) {
                console.log(`Deleting prerelease: ${release.tag_name}`);
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id,
                });
              }
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
